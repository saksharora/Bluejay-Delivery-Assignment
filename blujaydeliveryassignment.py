# -*- coding: utf-8 -*-
"""Blujaydeliveryassignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z9I-EyOnk0nrgAGFSBl4sRzXJ0RqZvxB
"""

#a) who has worked for 7 consecutive days.

import pandas as pd
from datetime import datetime, timedelta

# Load the CSV file into a DataFrame
df = pd.read_csv('/content/Assignment_Timecard.xlsx - Sheet1.csv')

# Seven Consecutive days
# Convert 'Time' and 'Time Out' columns to datetime objects
df['Time'] = pd.to_datetime(df['Time'])
df['Time Out'] = pd.to_datetime(df['Time Out'])

# Sort the DataFrame by 'Employee Name' and 'Time'
df_sorted = df.sort_values(by=['Employee Name', 'Time'])


# Function to check if an employee worked for 7 consecutive days
def consecutive_days_optimized(employee_data):
    dates = employee_data['Time'].dt.date  # Get dates as Series
    diff = dates.diff().dropna()  # Calculate differences between consecutive dates
    return (diff == pd.Timedelta(days=1)).sum() >= 6


# Filter the data for employees who have worked for 7 consecutive days
consecutive_employees = df_sorted.groupby('Employee Name').filter(consecutive_days_optimized)

# Extract unique employee names who worked for 7 consecutive days
consecutive_employee_names = consecutive_employees[['Employee Name','Position ID']].drop_duplicates()
with open("output1.txt", "w") as text_file:
    text_file.write("\nEmployees along with their Position who worked for 7 consecutive days:\n")
    text_file.write(consecutive_employee_names.to_string(index=False))
    text_file.write("\n\nTotal number of employees who worked for 7 consecutive days: {}\n".format(len(consecutive_employee_names)))

print("Output saved to output1.txt")

#b) wwho have less than 10 hours of time between shifts but greater than 1 hour

import pandas as pd
from datetime import datetime, timedelta
import numpy as np


# Load the CSV file into a DataFrame
df = pd.read_csv('/content/Assignment_Timecard.xlsx - Sheet1.csv')

# Convert 'Time' and 'Time Out' columns to datetime objects
df['Time'] = pd.to_datetime(df['Time'])
df['Time Out'] = pd.to_datetime(df['Time Out'])

# Sort the DataFrame by 'Employee Name' and 'Time'
df_sorted = df.sort_values(by=['Employee Name', 'Time'])

def time_between_shifts_optimized(employee_data):
    time_diffs = employee_data['Time'].diff()  # Calculate time differences
    return ((timedelta(hours=1) < time_diffs) & (time_diffs < timedelta(hours=10))).any()  # Check if any differences within the range

# Filter the data for employees with shifts within the specified time range
time_between_shifts_employees = df_sorted.groupby('Employee Name').filter(time_between_shifts_optimized)

# Extract unique employee names and position IDs with the appropriate time between shifts
time_between_data = time_between_shifts_employees[['Employee Name', 'Position ID']].drop_duplicates()

# Save output to a text file
with open("output2.txt", "w") as text_file:
    text_file.write("\nEmployees with less than 10 hours but more than 1 hour between shifts:\n")
    text_file.write(time_between_data.to_string(index=False))
    text_file.write("\n\nTotal number of Employees with less than 10 hours but more than 1 hour between shifts: {}\n".format(len(time_between_data)))

print("Output saved to output2.txt")

#c) Who has worked for more than 14 hours in a single shift

import pandas as pd
from datetime import timedelta
df = pd.read_csv('/content/Assignment_Timecard.xlsx - Sheet1.csv')
#loading the data set which are in the form of .csv file.

# Convert 'Time' and 'Time Out' columns to datetime objects
df['Time'] = pd.to_datetime(df['Time'])
df['Time Out'] = pd.to_datetime(df['Time Out'])
df_sorted = df.sort_values(by=['Employee Name', 'Time'])

df['Timecard Hours'] = pd.to_timedelta(df['Timecard Hours (as Time)'].str.replace(':', ' hours ') + ' minutes')

# Filter employees with shifts longer than 14 hours
long_shift_employees = df[df['Timecard Hours'] > timedelta(hours=14)]

# Extract unique employee names and position IDs
long_shift_data = long_shift_employees[['Employee Name', 'Position ID']]
unique_long_shift_data = long_shift_data.drop_duplicates()
with open("output3.txt", "w") as text_file:
    text_file.write("\nEmployees who worked more than 14 hours in a single shift:\n")
    text_file.write(unique_long_shift_data.to_string(index=False))

print("Output saved to output3.txt")

def join_output_files(output_filenames, main_output_filename="main_output.txt"):
   with open(main_output_filename, "w") as main_output_file:  # Create a new file or overwrite existing
        for filename in output_filenames:
            with open(filename, "r") as input_file:
                main_output_file.write(input_file.read())
                main_output_file.write("\n\n")  # Add extra newlines for separation

   print(f"Output files joined successfully into {main_output_filename}")

